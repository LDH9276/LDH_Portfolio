{"portfolio": [
  {
    "id": 1,
    "name": "사세 적응형 프로젝트",
    "family": "JAVASCRIPT, JQuery",
    "thumb": "id004_thumb.jpg",
    "project_date" : "23.1.20 - 1.27",
    "project_program" : "Html, JQuery, figma",
    "main_img": "id004_000.webp",
    "textimg01" : "id004_001.webp",
    "textimg02" : "id004_002.webp",
    "textimg03" : "id004_003.webp",
    "textimg04" : "id004_004.webp",
    "text01" : "적응형 사이트 웹을 만들기 위해 사세라는 브랜드의 리뉴얼 프로젝트를 하였습니다. 사세는 국내의 유명한 육가공 브랜드로서 에어프라이어용 치킨으로 대중에게 많은 인기를 가지고 있습니다. (개인적으로도 좋아하는 브랜드라 주말마다 먹고 있습니다.) 그렇기에 기존 사이트에서는 브랜드에 쓴 색상이 거의 없다시피해서 사세에 대한 브랜트 컬러를 담아내어 새로 사이트를 적응형으로 리뉴얼하였습니다.",
    "text03" : "데이터베이스 없이 순수한 html과 자바스크립트를 이용한 사이트를 제작하였습니다. 특히 일부 슬라이드는 Swiper없이 제작하였으며 대부분의 기능을 JQuery를 사용하여 동적인 사이트를 제작하였습니다.",

    "design" : "기존 사이트의 경우 사세의 메인컬러를 적극적으로 이용하지 않은 평범한 디자인이었습니다. 강렬한 노란색과 붉은색을 메인컬러로 설정하여 중심적으로 사용하였습니다. 또한 적응형 웹사이트이기 때문에 두 사이트의 레이아웃을 각각 다르게 디자인하는 것을 목표로 하였습니다. \n\n 1. PC 사이트의 경우 메인페이지에서는 슬라이더와 제품을 위주로 디자인했습니다. \n\n 2. 모바일 사이트의 경우 브랜드 소개의 경우 슬라이드 토글 애니메이션으로 모바일 환경에 맞추어 다시 디자인하였고, 제품 소개도 한 눈에 볼 수 있도록 의도하였습니다.",
    "Headtitle" : "적응형 웹사이트",
    "title01" : "인트로 슬라이드",
    "title02" : "이전 / 다음버튼",
    "title03" : "자동재생버튼 / 페이지버튼",
    "title04" : "ajax로 추가 갤러리 보여주기",
    "code1" : "  //인트로 슬라이드 슬라이드 함수\n    function imgFadeSlide(){\n      $('.intro-slide-slide').stop().slice(0).fadeOut(500);\n      if (n == 2){\n        n = 0;\n      } else {\n        n++;\n      }\n      $('.intro-slide-slide').eq(n).fadeIn(500);\n      let slidePersent = 33.33333333333333 * (n + 1);\n      introProgressBar.css('width', slidePersent + '%');\n      page_btn.eq(n).addClass('on').siblings().removeClass('on');\n    } \n      let timer = setInterval(imgFadeSlide, 3000);\n      function clearAuto(){\n      clearInterval(timer);\n      $('.intro-progress i.fas').removeClass('fa-puse').addClass('fa-play');\n    }",
    "code2": "prev_btn.click(function(){\n      clearAuto();\n      $('.intro-slide-slide').stop().slice(0).fadeOut(500);\n      if (n == 0){\n        n = 2;\n      } else {\n        n--;\n      }\n      $('.intro-slide-slide').eq(n).fadeIn(500);\n      let slidePersent = 33.33333333333333 * (n + 1);\n      introProgressBar.css('width', slidePersent + '%');\n      page_btn.eq(n).addClass('on').siblings().removeClass('on');\n    });\n\nnext_btn.click(function(){\n      clearAuto();\n      imgFadeSlide();\n    });      \n",
    "code3" : "$('.intro-progress i.fas').click(function(){\n      if($(this).hasClass('fa-pause')){\n        $(this).removeClass('fa-pause').addClass('fa-play');\n        clearInterval(timer);\n      } else {\n        $(this).removeClass('fa-play').addClass('fa-pause');\n        timer = setInterval(imgFadeSlide, 3000);\n      }\n    }\n    );\n      page_btn.click(function(){\n      clearAuto()\n      let idx = $(this).index();\n      $('.intro-slide-slide').stop().slice(0).fadeOut(500);\n      $('.intro-slide-slide').eq(idx).fadeIn(500)\n      $(this).addClass('on').siblings().removeClass('on');\n    });\n  })",
    "code4" : "//ajax gallary 가져오기\n\n    $(document).ready(function(){\n          $('.gall-morebtn').click(function(){\n        $('.gall-morebtn').hide();\n      $.ajax({\n        url: './script/gallary.json',\n        dataType: 'json',\n        success: function(data){\n          let gallary = data.gallImgs;\n          let gallaryItems = ''; //빈문자열\n          for(let i=0; i<gallary.length; i++){\n            gallaryItems +=\n            '<li> <figure> <img src='+gallary[i].src+'' alt=''+gallary[i].alt+''> </figure> </li>';\n          }\n          $('#list').html(gallaryItems);\n        }\n      });\n      return false;\n      });\n    });\n",
    "text02_2" : "다음은 슬라이드 이전과 다음 버튼입니다. 프로그래스 바가 각 슬라이드에 연동되도록 설정하였고 이전, 다음 버튼 클릭시 이벤트가 중복되지 않도록 clearAuto 함수를 만들어 이용환경을 개선하였습니다. \n\n",
    "text02_3" : "슬라이드 기타 컨트롤 부분입니다. 웹 접근성을 위해 자동재생과 멈춤버튼을 추가했습니다. 또한 페이지 버튼을 클릭하여 슬라이드를 이동할 수 있도록 하였습니다.",
    "text02_4" : "제이쿼리에 포함된 ajax를 사용하여 json파일을 호출하여 갤러리를 불러오도록 하였습니다. 더보기 버튼을 누르면 기존의 갤러리에서 추가 갤러리를 보여주고자 하였습니다. 그렇기 때문에 보다 더 동적인 갤러리를 만들 수 있었습니다.",
    "text02_1" : "메인 비주얼인 슬라이드를 위해 기존의 swiper가 아닌 제이쿼리를 이용하여 슬라이드를 제작하였습니다. PC에서 해상도는 제각각이기 때문에 우선적으로 반응형으로 제작하는 것을 우선으로 했고 33% 씩 3개의 슬라이드를 제작하였습니다. 다만 마지막에서 첫번째로 돌아가는 방식은 뒤로 되감듯이 가기 때문에 이 부분은 추후 수정할 예정입니다.",
    "text04" : "자바스크립트와 ajax로 동적인 기본적인 index페이지를 제작할 수 있었습니다. 또한 반응형이 아니라 적응형 웹 구조이기 때문에 저로 다른 레이아웃으로 디자인 시간은 길었지만, 매우 만족스러운 결과물이 나온 것 같습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/sase/index.html"
  },
  {
    "id": 2,
    "name": "B&O 리뉴얼 프로젝트",
    "project_date" : "23.2.13 - 3.3",
    "project_program" : "PHP, JQuery, figma",
    "family": "PHP",
    "thumb": "id003_000.webp",
    "main_img": "id003_000.webp",
    "textimg01" : "id003_001.webp",
    "textimg02" : "id003_002.webp",
    "textimg03" : "id003_003.webp",
    "textimg04" : "id003_004.webp",
    "text01" : "쇼핑몰을 구현하기 위해서 DB를 이용하는 방식에 익숙해야 하며, 프론트엔드는 DB를 받아와서 출력할 줄 알아야 하기에 개인 프로젝트 겸 데이터 연동 연습으로 B&O 사이트를 리뉴얼하였습니다. 개인이 했던 프로젝트 중에서 가장 많은 시간을 써왔던 것 같으며, DB연동과 웹페이지의 DB출력으로 많은 시간을 들었던 것 같습니다. \n\n데이터 연동을 위해 PHP를 사용하였으며, 프론트엔드는 JQuery를 사용하였습니다. 디자인은 figma를 사용하여 디자인을 하였습니다.",
    "design" : "디자인은 B&O의 깔끔한 블랙과 화이트톤을 최대한 살려내어 디자인 하였습니다. 또한 이번 프로젝트에서는 시험삼아 다크모드를 구현했으며 디자인적으로도 깔끔하고 눈이 편안한 디자인을 하였습니다. \n\n 반응형 레이아웃으로 PC, 태블릿, 모바일 환경에서도 최대한 깔끔하게 보이도록 하였습니다. 상품사진이 우선이므로, 동일한 톤의 배경을 사용하여 상품사진이 더욱 돋보이도록 하였습니다.",
    "text03" : "원래는 리액트를 위한 사이트로 디자인 하였으나 리액트의 데이터 전송 및 출력 방식에 익속하지 않아서 우선적으로 PHP언어로 작업하였습니다. 또한 자바스크립트 보다는 빠른 개발시간을 위해 제이쿼리를 사용하였습니다.",
    "Headtitle" : "심플하고 반응형 쇼핑몰을 만들기",
    "title01" : "DB연동 및 구현",
    "title02" : "다크모드 구현",
    "title03" : "로그인과 세션 구현",
    "title04" : "장바구니 구현하기",
    "code1" : "include ('./lib.php');\n    $sql = 'select * from goods_tab where goods_code = 'Earphone'';\n    $result = mysqli_query($conn, $sql);\n \n while ($row = mysqli_fetch_assoc($result)) {\n      $id = $row['goods_id'];\n      $image = $row['goods_image'];\n      $title = $row['goods_name'];\n      $info = $row['goods_info'];\n      $price = '₩ ' . $row['goods_price'];\n           if($price == '₩ '){\n        $price = '출시예정';\n      }\n  ...   }",
    "code2": "@media (prefers-color-scheme: dark) {\n      html, body{\n        background-color: #000;\n        color: #fff;\n      }\n      a {\n        color: #fff;\n      }\n      :root {\n        --m-color01 : #272727;\n        --m-color02 : #fff;\n        --m-color03 : #777;        --f-size01 : 14px;\n        --f-size02 : 16px;\n        --f-size03 : 18px;\n        --f-size04 : 32px;\n      }\n    }\n@media (prefers-color-scheme: light) {      :root {\n        --m-color01 : #272727;\n        --m-color02 : #fff;\n        --m-color03 : #f4f4f4;\n        --f-size01 : 14px;\n        --f-size02 : 16px;\n        --f-size03 : 18px;\n        --f-size04 : 32px;n      }\n    }",
    "code3" : "//회원가입\n\n$ID = $_POST['ID'] ?? '';\n    $PW = $_POST['PW'] ?? '';\n    $Email = $_POST['Email'] ?? '';\n    $markerting = $_POST['marketing'] ?? '0';\n    $hashed_password = password_hash($PW, PASSWORD_DEFAULT);\n    $stmt = $conn->prepare('INSERT INTO user_data SET\n    user_id=?, \n    user_password=?, \n    user_defaultEmail=?, \n    marketing=?\n    ');\n\n    $stmt->bind_param('ssss', $ID, $hashed_password, $Email, $markerting);\n    $stmt->execute();\n            echo '<script>alert('가입이 완료되었습니다.');</script>';\n    echo '<script>location.replace('./login.html');</script>';\n    mysqli_close($conn); // 데이터베이스 접속 종료\n    exit;\n\n\n//로그인\n\n$stmt = $conn->prepare('SELECT * FROM user_data WHERE user_id = ?');\n    $stmt->bind_param('s', $ID);\n    $stmt->execute();\n    $checkRes = $stmt->get_result();\n\nif(mysqli_num_rows($checkRes) == 0){ // 아이디가 없을 경우\n      echo '<script>alert('아이디가 존재하지 않습니다.');</script>';\n      echo '<script>history.back();</script>'';\n      exit;\n    } else{ // 아이디가 일치할 경우\n    $array = mysqli_fetch_array($checkRes);\n\n    $dbPW = $array['user_password'];\n        if (password_verify($PW, $dbPW)) {\n      $_SESSION['UserID'] = $ID;\n          mysqli_close($conn); ... \n    } else {\n        echo '<script>alert('비밀번호가 일치하지 않습니다.');</script>';\n  ...;\n    };",
    "code4" : "//장바구니 함수 function addToCart() {\n      const price = document.querySelector('.item-order-price').textContent;\n      if (price.indexOf('출시예정') > -1){\n        alert('출시예정입니다.');\n        return;\n      } else {\n      // 인풋의 밸류를 가져온다\n      const quantity = document.getElementById('quantity').value;\n       // 주소를 다음으로 설정한다\n      const url = 'cartlist.php?mode=add&insert=<?=$id?>&value=' + quantity;\n       // 다음으로 이동한다\n      window.location.href = url;\n      }\n    }// 장바구니 세션이 존재하지 않을 때, 새로 생성한다.\n    if (!isset($_SESSION['cart'])) {\n      $_SESSION['cart'] = array();\n    }\n\n// GET으로 받아온 값을 변수에 저장한다.\n    $id = $_GET['insert'];\n    $quantity = $_GET['value'];\n\n// 필터링 처리\n    $id = filter_var($id, FILTER_SANITIZE_NUMBER_INT);\n    $quantity = filter_var($quantity, FILTER_SANITIZE_NUMBER_INT);\n\n// 상품의 id와 수량을 배열에 저장한다.\n    $item = array('id' => $id, 'quantity' => $quantity);\n    $found = false;\n\n // 장바구니에 이미 상품이 존재하는지 확인한다.\n    foreach ($_SESSION['cart'] as $key => $value) {\n      if (is_array($value) && isset($value['id']) && $value['id'] == $id) {\n        // 조건식의 조건은 배열에 값이 존재하고(상품), 그 상품의 id가 현재 상품의 id와 같을 때\n        // 만약에 이미 장바구니에 있는 상품이라면, 수량만 더해준다.\n        $_SESSION['cart'][$key]['quantity'] += $quantity;\n        $found = true;\n        break;\n      }\n    }\n\n        if (!$found) {\n      // 만약에 장바구니에 없는 상품이라면, 새로 추가한다.\n      array_push($_SESSION['cart'], $item);\n    }\n\n        // 장바구니에 담긴 상품을 확인한다.\n    foreach ($_SESSION['cart'] as $key => $value) {\n      // 배열에 값이 존재하고, 그 값이 id와 quantity를 가지고 있다면\n      // 상품의 id와 수량을 출력한다.\n      if (is_array($value) && isset($value['id']) && isset($value['quantity'])) {\n        echo $value['id'] . ' '. $value['quantity'] . '<br>';\n      }\n    }\n\n    // 장바구니 페이지로 이동한다.\n    echo '<script>location.href = 'cart.php';</script>';",
    "text02_2" : "다크모드를 css로 구현하였습니다. 디바이스의 다크모드 세팅에 따라 어두운 테마와 밝은 테마를 보여주어 어두운 밤의 유저들에게 편안함을 줄 수 있었으며 디자인적으로 한층 더 새로운 느낌을 줄 수 있도록 하였습니다. 아쉬운점은 기기에 따라 강제 적용이 불가능한 문제가 있기에 추후에 다크모드 / 라이트모드 토글 버튼과 자바스크립트 제어 방식을 도입할 예정입니다.",
    "text02_3" : "우선 가장 먼저 회원정보를 DB에 입력시키도록 하는 것이 먼저였습니다. Insert Into 쿼리로 넣기 전에 STMT를 이용하여 입력값을 묶은 뒤에 SQL공격에 방어하도록 하였습니다. 또한 암호는 password_hash라는 함수를 이용하여 암호화를 하여 DB에 저장하게 해두었습니다. \n\n로그인은 우선적으로 POST로 보낸 두 값, ID와 PW를 대조합니다. 우선적으로 DB에 해당 ID가 존재하는지를 먼저 확인을 하며, ID가 존재할 경우에 DB에 암호화를 해둔 DB를 password_verify라는 함수를 이용하여 복호화 한 뒤에 대조하여 조회한 뒤에 성공하면 세션을 부여하도록 하였습니다.",
    "text02_4" : "장바구니는 제품 상세페이지의 input의 상품수량을 가져오고 DB에서 가격을 조회한 후에 세션에 담아 cart.php에 출력하도록 하였습니다. \n\n 또한 중복 상품일 경우에는 배열에서 해당 상품의 수량만 추가되는 기능으로 수정하였고, 장바구니 페이지에서는 해당 세션을 조회하여 출력하도록 하였습니다. \n\n",
    "text02_1" : "PHP는 자바스크립트와 비슷한 언어를 가졌으나, 서버에서 직접 연결하여 랜더링하기 때문에 코드를 실시간으로 수정할 수 없다는 단점이 있습니다. 그렇기에 우선적으로 HTML을 먼저 퍼블리싱을 한 이후에 DB를 연결하여 해당 데이터베이스의 컬럼을 조회하도록 하였습니다.",
    "text04" : "PHP를 중점으로 다뤘고 DB를 연결하여 데이터를 주고받는 방식을 배웠습니다. 또한 세션을 이용하여 로그인 상태를 유지하는 방법을 배웠습니다. 하지만 PHP는 코드가 길어지면 길어질수록 가독성이 떨어지는 단점이 있으며 HTML과 PHP언어를 섞어쓰다 보니 유지관리에도 취약한 점이 계속해서 노출되는 문제를 접했습니다. \n\n가장 컸던 것은 코드를 수정할 때마다 서버를 재시작해야하는 불편함이 있습니다. 그렇기에 리액트를 통한 쇼핑몰 구축을 기획하게 되었습니다 향후 이 사이트도 리액트를 기반으로 교체하고자 기획하고 있습니다..",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/shoppingmall/index.php"
  },
  {
    "id": 3,
    "name": "나만의 가계부 프로젝트",
    "project_date" : "23.4.10 - 4.15",
    "project_program" : "React, Javascript, figma",
    "family": "REACT",
    "thumb": "id002_000.webp",
    "main_img": "id002_000.webp",
    "textimg01" : "id002_001.webp",
    "textimg02" : "id002_003.webp",
    "textimg03" : "id001_003.webp",
    "textimg04" : "id001_004.webp",
    "text01" : "매번 수업하면서 커피를 마시고 에너지드링크도 사먹고 아침 대신에 샌드위치로 매번 때우려다 보니까 가랑비에 옷 젖듯이 돈이 빠져나가게 되었습니다. \n \n 그렇기에 과소비를 줄이고자 간편하게 만드는 가계부 웹 앱을 만들기로 하였고 마찬가지로 HTML보다는 리액트 개발환경으로 컴포넌트로 유지보수도 쉽게 만들고자 의도하였습니다. \n 우선적으로 가장 심플하고 입력창이 메인으로 한 디자인을 채택하였습니다.",
    "design" : "디자인은 심플한 톤으로 기획했습니다. 오직 태블릿과 모바일 환경만 고려한 디자인이었기 때문에 PC 환경에서은 미구현하지 않았고. 이런 점 때문에 디자인에서의 소요시간과 리소스를 줄일 수 있었습니다. \n\n 상단 부분에는 배너와 입력폼을 배치하였고, 하단에는 사용한 총 금액과 리스트를 배치하였습니다. \n\n 1. 배너 : 심플한 라인 일러스트의 스타일과 재치있는 글 내용을 넣었습니다. \n\n 2. 입력 폼 : 지출내역과 비용 날짜, 사진(파일명)을 입력해서 하단의 표시되도록 하였습니다. \n\n 3. 리스트 : 입력한 내역이 리스트로 표시되도록 하였습니다. 특히 입력폼의 내용에 따라 사진이 바뀌도록 하였습니다. \n\n 4. 총 금액 : 입력한 내역의 총 금액을 표시하도록 하였습니다.",
    "text03" : "개발 라이브러리는 React로서 제작되었습니다. 리액트를 사용함으로서 데이터 추가 변경시 새로고침이 되지 않는 점 때문에 모바일 환경에서의 사용자 경험을 최대로 끌어올 수 있었습니다.",
    "Headtitle" : "과소비를 줄이자! 나만의 가계부",
    "title01" : "컴포넌트 구조화",
    "title02" : "로컬스토리지 기능 구현하기",
    "title03" : "수정 및 삭제 기능 구현하기 1",
    "title04" : "수정 및 삭제 기능 구현하기 2",
    "code1" : "<Create \n  onChange={onDataChange}\n  info={info} imageName={imageName}\n  price={price}\n  date={date} onDataChange={onDataChange}\n  onCreate={onCreate}\n  infoRef={infoRef}\n  priceRef={priceRef}\n  dateRef={dateRef}\n  imageNameRef={imageNameRef}  />\n\n    <div className='item-wrap'>\n      <p className='item-result'>\n        <span>총 사용한 금액은</span>\n        <span className='sum'>{sum}원</span>\n      </p>\n      <ul className='list'>\n       {result.map(item => \n        <Product Products={item}\n          key={item.id}\n          onRemove={onRemove}\n          onDataChange={onDataChange2}\n          onCompleteClick={onCompleteClick}/>\n       )}\n      </ul>\n    </div>\n",
    "code2": "//추가 버튼 클릭시 \n    const onCreate =()=>{ \n\n// input 값이 비어있지 않을 경우 \n        const item={ \n          id:'p0'+nextId.current, \n          info,\n          price,\n          date,\n          imageName\n        }; //새로운 객체 생성\n        setItems([...items, item]);\n\n //배열에 새로운 객체 추가\n //로컬 스토리지 배열에 추가\n        existingItems.push(item);\n        localStorage.setItem('items', JSON.stringify(existingItems));\n\n\n     setInputs({\n          info : '',\n          price : '',\n          imageName : '',\n          date : ''\n        }); //input 초기화\n        nextId.current+=1; //다음값을 1씩 증가\n      }",
    "code3" : "//변경관련 state함수\n    //updateProduct콤포넌트에서 [변경완료]를 누르면 처리될 클릭 이벤트에 줄 함수\n    const onCompleteClick=(id)=>{ //함수의 매개변수로 id를 담아줌 key값을 식별하기 위함\n      const item ={\n        id:id,\n        info: inputs2.info,\n        price : inputs2.price,\n        imageName : inputs2.imageName,\n        date :  inputs2.date\n      };\n\n\n      setItems(  //위에서 입력한 배열데이터를 변경하기 위함\n          items\n          .filter((item) => item.id!==id) //기존 아이디와 같은 배열 데이터는 삭제\n          .concat(item) //새롭게 연결하고자 하는 데이터 product에 붙여줌 \n          .sort((a, b)=>{ //id순서대로 들어 가야하기 때문에 순서에 맞게 정렬해줌\n            if(a.id>b.id) return 1;\n            if(a.id<b.id) return -1;\n            return 0;\n          })\n      );",
    "code4" : "const onRemove = (id) => {\n      // array.filter() : 배열에서 특정 조건을 만족하는 원소들만 추출하여 새로운 배열을 만들어줌\n      // array.filter(function(Current Value, index, array){ this Value })\n      setItems(items.filter(item => item.id !== id));\n        //로컬 스토리지에 업데이트\n      localStorage.setItem('items', JSON.stringify(items.filter(item => item.id !== id)));\n        // 배열에 있는 id가 파라미터로 받은 id와 같지 않은 것들만 추출하여 새로운 배열을 만듦\n    }\n\n      const updatedItems = items\n      .filter((item) => item.id!==id) //기존 아이디와 같은 배열 데이터는 삭제\n      .concat(item) //새롭게 연결하고자 하는 데이터 product에 붙여줌\n       .sort((a, b)=>{ //id순서대로 들어 가야하기 때문에 순서에 맞게 정렬해줌\n        if(a.id>b.id) return 1;\n        if(a.id<b.id) return -1;\n        return 0;\n      })\n\n        localStorage.setItem('items', JSON.stringify(updatedItems));",
    "text02_2" : "구현하고자 했던 부분은 추가 버튼 클릭시 기존 배열에서 해당 아이템만 추가하는 형태로 해야 했습니다. 우선적으로 입력완료시에 id의 일련번호화 정보, 가격, 날짜, 그리고 이미지 이름을 입력하게 한 뒤에 Item이라는 State로 저장한 뒤에 이 배열을 로컬 스토리지에 담았습니다. \n\n그 다음에는 수정, 그리고 삭제 버튼으로 배열을 수정해서 다시 담아오는 과정과 해당 배열의 index를 참고해서 배열에서 제외하는 방식도 다음 챕터에서 다루겠습니다. \n\n",
    "text02_3" : "수정버튼을 누르면 수정 컴포넌트의 state를 통해 나타나게 하고 다음과 같이 수정되는 함수를 작성하였습니다. create와 수정의 state가 겹치지 않도록 inputs2로 작성하였으며, 이를 통해 수정된 배열을 filter로 추출한 뒤에 concat으로 새로운 배열로 합쳐서 items에 담은 뒤에 로컬스토리지에 저장하게 됩니다.  \n\n수정된 배열을 다시 불러오는 과정에서 id를 기준으로 정렬을 해야하는데, 이는 sort를 통해 id를 기준으로 정렬하게 하였습니다.",
    "text02_4" : "삭제는 필터 메서드를 통하여 해당 아이템의 id와 같지 않은 것들만 추출하여 새로운 배열을 만들어서 items에 담은 뒤에 로컬스토리지에 저장하게 됩니다. \n\n이렇게 로컬스토리지에 저장된 배열을 불러오는 과정에서는 JSON.parse를 통해 JSON 문자열을 객체로 변환해야합니다. 그리고 배열을 넘길때는 무조건 JSON.stringify를 해야했기에 간단하지만 구현난이도가 높았습니다.",
    "text02_1" : "리액트에서 가장 처음 접했을 때 난해했던 개념은 컴포넌트 개념이었습니다. 어떤 함수를 자손에게 넘기고, 자손에서는 부모에게 값을 보낼 때 가장 난해하고 이해하기 어려웠습니다만 이번 프로젝트를 통해 이해할 수 있었습니다. \n\n또한 로컬스토리지에 저장하는 방법도 처음에는 어려웠지만, 이번 프로젝트를 통해 이해할 수 있었으며 배열을 수정하고 삭제하는 방법도 처음에는 어려웠지만, 이번 프로젝트를 통해 이해할 수 있었습니다.",
    "text04" : "해당 프로젝트로 리액트의 대한 이해도가 높아졌으며 또한 로컬스토리지에 데이터를 저장하는 방법에 대한 이해도가 높아졌습니다. 다만 아쉬운 점은 브라우저 내부의 스토리지를 사용하는 방식이라 개별 기기마다 데이터를 통합할 수 없었으며 데이터 자체가 일회성인 느낌이 많았습니다. \n\n추후 개선 방법은 비동기 통신을 통하여 외부 서버에 접속하여 DB로 저장하고 불러오는 방식으로 개선할 수 있습니다. 또한 로그인 기능을 추가하여 로그인한 유저만 접속할 수 있도록 하는 방식으로 개선할 예정입니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/gagaebu"
  },
  {
    "id": 4,
    "name": "무인양품 리뉴얼 프로젝트",
    "project_date" : "23.5.2 - 5.14",
    "project_program" : "React, Swiper, PHP, Javascript, figma",
    "family": "REACT",
    "thumb": "MUJI.png",
    "main_img": "id001_000.webp",
    "textimg01" : "id001_001.webp",
    "textimg02" : "id001_002.webp",
    "textimg03" : "id001_003.webp",
    "textimg04" : "id001_004.webp",
    "design" : "디자인은 무인양품의 심플함을 기초로 디자인했습니다. 기존 디자인에서 상품 위주의 슬라이드 레이아웃을 채택하였고, 반응형이 아니었던 기존 사이트에서 반응형 디자인으로 변경하였습니다. ",
    "text03" : "개발 라이브러리는 React와 각 컴포넌트별로 연결할 'React-Router-Dom', 슬라이드 구현을 위한 'Swiper', PHP에 요청을 보내고 데이터를 받아오는 'AXIOS', 마지막으로 서버구현을 'PHP'로 하였습니다. 해당프로젝트에서의 중점은 PHP에서 어떻게 데이터 처리를 할 것이냐와 AXIOS를 통해 어떻게 데이터를 요청하고 받아올 것이냐에 있었습니다.",
    "Headtitle" : "리액트로 만드는 쇼핑몰 프로젝트",
    "title01" : "PHP 쿼리 결과 JSON으로 전달하기",
    "title02" : "리액트와 PHP를 연동하기",
    "title03" : "장바구니 State",
    "title04" : "AXIOS POST 전송하기",
    "code1": "// JSON으로 다음 형식으로 전달한다. \"list\" : {\"no\" ,\"name\", \"img\", \"price\"}\n    $data = array();\n\n    while ($row = mysqli_fetch_assoc($result)) {\n      $data[] = array(\n        'no' => $row['no'],\n        'name' => $row['name'],\n        'img' => $row['img'],\n        'price' => $row['price'],\n        'cate' => $row['cate'],\n      );\n    }\n\n // 해당 결과를 JSON에 담아 전송한다.\n    echo json_encode(array('list' => $data));\n}",
    "code2" : "  const fetchList = async() => {\n    try { // 응답 성공\n      const response = await axios.get(productListPHP);\n      setList(response.data.list);\n    } catch (e) { // 응답 실패\n      setError(e);\n      console.log(e +error);\n    }\n  };\n\n  useEffect(() => {\n    fetchList();\n  }, []);\n\n    //filter()메서드로 분리해서 컴포넌트에 담기\n\n    const categoryNewList = list.filter(item => item.cate === '생활용품');\n    const categoryWalkerList = list.filter(item => item.cate === 'MUJI WALKER');   ",
    "code3" : "    const cartlist = localStorage.getItem('cart'); // 로컬스토리지에 저장된 값을 가져온다.\n    const cartArray = JSON.parse(cartlist);\n    // 로컬스토리지의 값은 JSON 문자열을 객체로 변환해야한다.\n\n    const cart = cartArray.map((item) => { // 장바구니에 담긴 상품의 id와 수량을 가져온다.\n      return {\n        img: item.img,\n        name: item.name,\n        price: item.price,    \n        quantity: item.quantity,\n      }\n    });\n\n    const newCartValue = updatedCart.reduce((acc, item) => acc + item.quantity, 0); \n    // 장바구니에 담긴 수량을 계산한다.\n    setCartValue(newCartValue);\n    // 장바구니에 담긴 수량을 업데이트한다.",
    "code4" : "  const addToBuy = () => {\n\n      const cartlist = localStorage.getItem('cart'); // 로컬스토리지에 저장된 값을 가져온다.\n      const cartArray = JSON.parse(cartlist);\n      // 로컬스토리지는 먼저 JSON 문자열을 객체로 변환해야한다.\n      const cart = cartArray.map((item) => { // 장바구니에 담긴 상품의 id와 수량을 가져온다.\n        return {\n          ...\n        }\n      });\n\n      const formData = new FormData();\n      formData.append('id', userId);\n      formData.append('cart', JSON.stringify(cart));\n      // 알아야 할 것 : 배열을 넘길때 무조건 JSON.stringify를 할 것!!\n\n      axios.post(BuyPHP, formData)\n        .then((response) => {\n          if(response.data.success === true) {\n            alert('구매가 완료되었습니다.');\n            setCartValue(0);\n            localStorage.setItem('cart', JSON.stringify([]));\n            navigate('/orderlist');\n          }\n        })\n      }\n    }",
    "text01" : "데이터베이스를 적극적으로 활용하는 것은 쇼핑몰일것입니다. 상품정보, 유저관리, 구매테이블… 그렇기 때문에 데이터베이스와 리액트를 사용한 프로젝트는 당연히 쇼핑몰이 가장 적합했습니다. \n \n다만 아쉽게도 이전의 프로젝트에서는 리액트와 데이터베이스 접근하는 방식을 쓰는 것에 비해 제작시간이 촉박했기 때문에 순수 PHP로만 작업해야 했습니다. 추후 완전한 서버사이드 스크립트인 next.js를 도입할 예정입니다.\n심플한 디자인에 잘 어울리는 사이트는 찾다가 무인양품을 찾았습니다. 기존사이트에서는 리액트로 제작된 사이트 아니기에 리액트 기반으로 쇼핑몰을 만들었습니다. 기존 디자인 보다는 반응형을 중점으로 상품을 메인으로 해서 신상품, 이벤트 상품, 이벤트 상품2, MD의 추천, 계절의 추천 순으로 만들었습니다.",
    "text02_1" : "가장 먼저 해야 했던 것은 PHP를 만드는 것이었습니다. echo JSON_encode()메서드로 각각 결과물을 도출하는 식으로 하였습니다. 그 다음에는 JWT를 통해 로그인을 하면 토큰을 만들고 로컬스토리지에 저장하는 식으로 구현했습니다. 리액트로는 프론트엔드를 담당하기 때문에 JSON을 처리하는 방식에 대해 고민해야 했습니다. 그렇기 때문에 map()함수를 더욱 더 적극적으로 사용해야 했고, 결과론적으로는 JSON을 다루는 방식에 대해 많이 이해하게 되었습니다.\n\n ",
    "text02_2" : "다음 문제는 기획과는 다르게 각 컴포넌트별로 Axios를 불러오기 때문에 리소스 낭비가 심했습니다. ex : mujisale.php / mujieven.php / mujiweather.php 하지만 상품에서 json으로 일괄 출력 후 해당 카테고리만 filter()메서드로 추출하는 방식으로 해결했습니다.\n \n 쇼핑몰이다보니 구현 영역이 점점 늘어나게 되었습니다. 장바구니 기능을 로컬스토리지로 구현했고, 그 다음에는 장바구니의 양을 reduce로 나누어 state에 담았습니다. \n \n",
    "text02_3" : "쇼핑몰이다보니 구현 영역이 점점 늘어나게 되었습니다. 장바구니 기능을 로컬스토리지로 구현했습니다. 이는 이전 프로젝트인 ‘나만의 가계부’에서 다뤘던 경험과 스택오버플로우에서 찾았었고, 그 다음에는 장바구니의 양을 reduce로 나누어 state에 담았습니다.",
    "text02_4" : "가장 구현이 어려웠던건 회원가입과 구매버튼이었습니다. PHP 자체에 처리하기에 PHP난이도는 적었지만 Javascript에서 AXIOS로 보낼 때 클래스 문법으로 post에 보낼 키를 정하고 값을 보내는 방식을 찾아내 만들었습니다. 반대로 PHP에서는 결과를 JSON으로 처리하도록 수정해야했습니다. 특히 JSON을 처리할때는 JSON.stringify를 반드시 써야하는 점을 배울 수 있었습니다.",
    "text04" : "해당 프로젝트는 일주일동안 최대한 만드는 것에서 의의를 두고 있습니다. 아직 미구현되고 퍼블리싱을 못한 부분이 군대군대 보이지만, 향후 추가로 구현한다면 상업적으로 손색없을 사이트로 만들 수 있을 것 같습니다. 또한 리액트의 데이터를 주고받는 방식에 대해 많이 배웠습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/muji"
  },
  {
    "id": 5,
    "name": "시드물 반응형 프로젝트",
    "project_date" : "22.12.12 - 23.1.20",
    "project_program" : "HTML, CSS, JQuery, figma",
    "family": "REACT",
    "thumb": "MUJI.png",
    "main_img": "id005_000.webp",
    "textimg01" : "id005_002.webp",
    "textimg02" : "id005_001.webp",
    "textimg03" : "id001_003.webp",
    "textimg04" : "id001_004.webp",
    "design" : "디자인은 시드물의 녹색을 기반으로 하여 다시 작업하였습니다. 우선적으로 색상이 많았던 기존 사이트의 디자인에서 색상을 3가지로 제한하여 깔끔한 디자인 레이아웃과 동시에 반응형으로 모바일, 태블릿, PC 할 것 없이 좋은 디자인을 만들도록 의도하였고, 이러한 배색을 바탕으로 PC, 태블릿, 모바일 와이어프레임을 작성하여 디자인을 구현하였습니다.",
    "text03" : "개발 라이브러리는 HTML과 CSS, 그리고 제이쿼리를 이용하여 개발하였습니다. 하지만 슬라이드 부분에는 제작상의 어려움과 코드 유지관리의 어려움을 이유로 슬라이드 프레임워크인 Swiper.js를 적극적으로 이용하였습니다.",
    "Headtitle" : "최악의 사이트를 최선의 사이트로",
    "title01" : "미디어쿼리를 통한 CSS 반응형",
    "title02" : "Swiper Slide사용",
    "title03" : "CSS통일 : 케밥코드 스타일",
    "title04" : "제이쿼리를 통한 이미지 주소 변경",
    "code1": " /*PC화면 */ \n@media screen and (min-width: 1025px)... \n\n  /*태블릿 화면 */ \n@media screen and (min-width:768px) and (max-width:1024px)... \n\n  /*모바일 화면 */ \n@media screen and (min-width:320px) and (max-width:767px)...",
    "code2" : "// 슬라이더 선언\n    let swiper = new Swiper('.m-banner-swiper', {\n      pagination: {\n        el: '.swiper-pagination',\n        type: 'progressbar',},\n      navigation: {\n        nextEl: '.swiper-button-next',\n        prevEl: '.swiper-button-prev'},\n      autoplay: {\n        delay: 5000,},\n      loop: true});\n\n// 슬라이더 버튼\n    let playBtn = '../img/play_btn.svg'\n    let pauseBtn = '../img/pause_btn.svg'\n    let cBtn = document.getElementById('c-btn')\n        $('.swiper-btn').click(function(){\n      if($(this).find('img').attr('src') === './img/pause_btn.svg'){\n      swiper.autoplay.stop();\n      $(this).find('img').attr('src', './img/play_btn.svg');\n      return false;\n    }else{\n      swiper.autoplay.start();\n      $(this).find('img').attr('src', './img/pause_btn.svg');\n      return false;\n      }\n    });});",
    "code3" : "/* 제품정보 */\n.pd-tab-menu {\n      display: inline-block;\n      padding: 0 20px;\n      font-size: 24px;\n      line-height: 80px;\n      margin-left: 30px;\n      cursor: pointer;\n  }\n\n/*회사정보*/\n    .st-btn:hover{\n      background: #83A666;\n      color: #fff;\n      border: none;\n    }\n    .st-animal h2{\n      display: none;\n    }\n    .st-icon h2{\n      display: none;\n    }\n    .st-icon-container > h2, .st-icon > article > h3{\n      display: none;\n    }"
    ,
    "code4" : "//resize 이벤트\n    $(window).resize(function(){\n    //해상도가 768 미만이라면 이미지 주소 변경\n    if (window.innerWidth < 769) {\n      $('.slide01 img').attr('src', './img/mainslide1-m.jpg');\n      $('.slide02 img').attr('src', './img/mainslide2-m.jpg');\n      $('.slide03 img').attr('src', './img/mainslide3-m.jpg');\n      $('.slide04 img').attr('src', './img/mainslide4-m.jpg');\n      $('.slide05 img').attr('src', './img/mainslide5-m.jpg');\n    }else{\n      $('.slide01 img').attr('src', './img/mainslide1.jpg');\n      $('.slide02 img').attr('src', './img/mainslide2.jpg');\n      $('.slide03 img').attr('src', './img/mainslide3.jpg');\n      $('.slide04 img').attr('src', './img/mainslide4.jpg');\n      $('.slide05 img').attr('src', './img/mainslide5.jpg')\n    }\n    }).resize();",
    "text01" : "시드물 사이트는 가성비로 유명하고 자연유래 성분으로 유명한 브랜드입니다. 하지만 사이트는 시드물 브랜드 런칭 이후 전혀 리뉴얼 되지 않아 지저분한 2000년도 중반의 웹 환경에서 벗어나지 못하고 있었습니다. 또한 모바일앱을 따르 런칭하였으나 사용자 경험상에서도 좋지 않았기 때문에 과감하게 디자인을 바꿔야 될 이유가 있있습니다. \n\n최초의 팀 프로젝트이며, 저는 디자인 초안 및 와이어프레임 제작을, 그리고 개발을 맡았으며, 다른 조원의 퍼블리싱 추가 기능을 담당했습니다. 그렇기 때문에 조원들과 협업하여 주어진 시간 안으로 완성도 높은 사이트를 만들어야 했습니다. \n\n 작업영역 : 디자인(메인페이지, 컨셉), 메인페이지, 헤더/푸터 공통서식",
    "text02_1" : "정해진 디자인을 기반으로 각 조원들이 맡아서 퍼블리싱 작업을 하였습니다. 저는 우선적으로 인덱스페이지(메인)과 헤더, 푸터의 반응형 개발을 맡았습니다. \n \n 미디어쿼리를 통해 각 화면별로 디자인을 구현하였고, 모바일 환경에서는 햄버거 메뉴를 구현하였습니다. 하지만 이 미디어쿼리에 익숙하지 않았던 첫 프로젝트 였기 때문에 대부분의 중복 속성이 발견되고 최대한으로 줄이는 작업에 애를 먹기도 했습니다.",
    "text02_2" : "다음은 헤더푸터의 변경점과 다른 제이쿼리 소스를 이용하여 슬라이드 및 드롭다운 메뉴를 구현하였습니다. Swiper는 원하는 옵션으로 추가할 수 있다는 점이 장점이이며 자체 API문서를 통해 추가기능을 넣을 수 있어 자동재생, 멈춤 버튼을 넣어 자동재생 기능을 구현했습니다. \n\n 하지만 내부에 CSS가 모듈화 되어 있어 커스텀하기가 힘들었습니다. 그래서 CSS를 뜯어내어 !important로 수정하였고 차기 프로젝트는 최대한 Swiper 사용 대신에 제이쿼리를 이용한 슬라이드를 제작하였습니다.",
    "text02_3" : "그 다음에는 조별 프로젝트이다 보니 많은 고민을 해야 했던 부분은 클래스 지정 문제였습니다. 그렇기에 저희는 개발 단계 전에 각자 페이지를 맡았으며, 해당 페이지마다 고유의 클래스를 작성하여 따로 CSS를 만들어 작업하였습니다. 이렇게 하면 나중에 CSS를 수정할 때도 편리하고, 다른 조원이 작업한 부분을 수정할 때도 편리하다는 장점이 있습니다. 하지만 단점은 중복서식이 존재한다는 점이었습니다.",
    "text02_4" : "동적인 반응형을 위해 메인페이지에서는 슬라이드 이미지를 다르게 변경할 필요가 있었습니다. 가로로 이어진 슬라이드는 글자와 이미지의 조화를 좌우로 맞추었지만, 모바일 환경에서는 화장품이 한 가운데에 있을 필요가 있고 또한 리사이즈한 이미지의 주소를 바꾸어 보다 더 동적인 슬라이드를 제작할 수 있었습니다.",
    "text04" : "처음 조별 프로젝트에 형상관리를 안하다 보니 작업 중 충돌이 일어날 여지가 많았습니다. 다행히도 각 맡은 부분을 담당하기에 큰 충돌은 없었지만, 향후 git과 같은 형상관리 툴의 도입을 하는 것으로 프로젝트를 마쳤습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/sidmool/index.html"
  },
  {
    "id": 6,
    "name": "넷마블 리뉴얼 프로젝트",
    "project_date" : "23.1.20 - 2.24",
    "project_program" : "HTML, CSS, PHP, JQuery, figma",
    "family": "PHP",
    "main_img": "id006_000.webp",
    "textimg01" : "id006_002.webp",
    "textimg02" : "id006_003.webp",
    "textimg03" : "id001_003.webp",
    "textimg04" : "id001_004.webp",
    "design" : "디자인은 넷마블의 CI 색상을 따와서 디자인을 하였습니다. 전체적인 색상은 넷마블의 메인컬러인 노란색을 많이 사용하여 따뜻한 느낌을 주었으며, 동적이고 재미있는 느낌을 주기 위해 각진 사각형의 디자인이 아닌 라운드를 넣어 보다 더 친숙하고 부드러운 느낌을 주었습니다.",
    "text03" : "개발 라이브러리는 HTML과 CSS, 그리고 제이쿼리를 이용하여 개발하였습니다. 추가적으로 인재채용 부분은 본격적으로 데이터베이스가 들어가는 영역이다보니 PHP언어를 적극적으로 사용하였습니다. 최대한 Swiper를 사용하지 않으면서 슬라이드를 만들려고자 제이쿼리를 중점으로 사용했습니다.",
    "Headtitle" : "다양한 기능을 한 페이지에",
    "title01" : "DB테이블 제작",
    "title02" : "PHP로 DB 작업하기",
    "title03" : "파일 업로드하기",
    "title04" : "AJAX를 통한 로그인 정보 확인",
    "code1": "CREATE TABLE `job_data` (\n    `job_id` int(80) NOT NULL,\n    `job_company` varchar(80) DEFAULT NULL,\n    `job_type` varchar(80) DEFAULT NULL,\n    `job_title` varchar(255) DEFAULT NULL,\n    `job_info` varchar(80) DEFAULT NULL,\n    `job_Date` varchar(40) DEFAULT NULL,\n    `job_about` text DEFAULT NULL)\n\nCREATE TABLE `user_data` (\n  `user_no` int(255) NOT NULL,\n  `user_id` varchar(40) NOT NULL,\n  `user_password` varchar(255) NOT NULL,\n  `user_name` varchar(80) DEFAULT NULL,\n  `user_profile` varchar(255) DEFAULT NULL,\n  `user_location` varchar(255) DEFAULT NULL,\n  `user_phone` varchar(18) DEFAULT NULL,\n  `user_email` varchar(255) DEFAULT NULL,\n  `user_opt1` varchar(8) DEFAULT NULL,\n  `user_opt2` varchar(8) DEFAULT NULL,\n  `user_opt` varchar(20) DEFAULT NULL,\n  `user_intro` varchar(8000) DEFAULT NULL,\n  `user_emdate` date DEFAULT NULL,\n  `master` int(2) NOT NULL DEFAULT 0,\n  `job_id` int(20) DEFAULT NULL,\n  `marketing` varchar(20) DEFAULT NULL,\n  `user_defaultEmail` varchar(255) DEFAULT NULL)",
    "code2" : "$stmt = $conn->prepare('UPDATE user_data SET \n user_name = ?, \n user_profile = ?, \n user_email = ?, \n user_phone = ?, \n user_location = ?, \n user_opt1 = ?, user_opt2 = ?, \n user_opt = ?, \n User_Intro = ?, \n user_emdate = ?, \n job_id = ? WHERE user_id = ?');\n \nif ($stmt === false) {\n         die('Prepare failed: ' . $conn->error);\n     }\n     $stmt->bind_param('ssssssssssss', $name, $img, $email, $phone, $address, \n     $opt01, $opt02, $opt03, $intro, $now ,$job_id, $ID);\n     $stmt->execute();\n     $result = $stmt->get_result();\n     echo '<script> alert('지원이 완료되었습니다.');",
    "code3" : "if(isset($_FILES['userimg'])) {\n      $file_name = $_FILES['userimg']['name'];\n      $file_size = $_FILES['userimg']['size'];\n      $file_tmp = $_FILES['userimg']['tmp_name'];\n      $file_type = $_FILES['userimg']['type'];\n      $file_ext = strtolower(end(explode('.', $_FILES['userimg']['name'])));\n      $expensions = array('jpeg', 'jpg', 'png', null);\n\nif(in_array($file_ext, $expensions) === false){\n        $errors[] = '올바른 사진 확장자가 아닙니다. 파일을 확인해주세요.';\n      }\n          if($file_size > 2097152) {\n        $errors[] = 'File size must be excately 2 MB';\n      }\n\nif(empty($errors) == true) {\n        move_uploaded_file($file_tmp, '../user/profileimg/'.$file_name);\n        $img = $file_name;\n      } else {\n        print_r($errors);\n      }\n    } else {\n      $img = null;\n    };"
    ,
    "code4" : "<?php\n    session_start();\n    $data = $_SESSION['UserID'];\n        if($data == null){\n      echo '';\n    } else {\n      echo $data;\n    }\n?>\n\n// AJAX로 PHP파일 호출\n      $.ajax({\n        type : 'GET',\n        url : 'http://leedh9276.dothome.co.kr/employment/script/session.php',\n        dataType : 'html',\n        error : function(){\n        },\n        success : function(data){\n          if(data == ''){\n            $('.lnb').html('<li><a href=''>로그인</a></li>\n                  <li><a href='' title='회원가입하기'>회원가입</a></li>');\n          } else {\n            $('.lnb').html('<li><a href='' title='로그아웃하기'>로그아웃</a></li>');\n          }\n        }\n      \n      })",
    "text01" : "기존 넷마블 사이트는 두 개로 나뉘어져 있었습니다. 하지만 게임사이트와 브랜드 컴퍼니를 하나로 합쳐 사용자 경험을 이끌어내는 프로젝트를 진행하였고 저희 조원은 각자 부분을 맡아서 개발을 했습니다. 넷마블 브랜드 사이트를 기획하면서 가장 중점인 것은 DB를 활용한 프로젝트였으며, 이는 가장 처음으로 PHP를 적극적으로 활용한 두 번째 프로젝트이기도 합니다.\n\n개인의 개발범위 : 인재채용 페이지 / PHP연동 / DB연동 / 적응형 및 메인, 게임페이지 슬라이드 JS 개발",
    "text02_1" : "먼저 DB를 작업해야 했습니다. XAMPP를 이용하여 로컬호스트로 개발환경을 구성하고 다음과 같이 SQL로 테이블을 만들었습니다. \n\n우선 채용정보 테이블인 job_data 테이블을 만들어 job_id로 각 채용마다 고유의 id를 만들어 채용지원시에 어느 채용에 지원했는지 알기 쉽도록 했습니다. 그리고 user_data 테이블을 만들어 지원자의 정보를 저장할 수 있도록 하였습니다. 그런다음에 유저테이블에 job_id를 만들어 관계형으로 엮은 뒤에 각 하나의 채용만을 하도록 의도하였습니다. \n\n이렇게 DB를 구성하고 PHP를 이용하여 DB와 연동하였습니다.",
    "text02_2" : "PHP는 기존의 html과 자바스크립트와 달리 서버와의 통신으로 데이터 처리를 할 수 있다는 점이 가장 큰 장점이었습니다. 서버로 정보를 저장하고 그 정보를 입력, 수정도 할 수 있기 때문에 저희는 이를 활용하여 회원가입, 로그인, 지원정보, 지원하기 등의 기능을 구현하였습니다. \n\n또한 PHP는 데이터베이스 연동이 가능하기 때문에 저희는 이를 활용하여 지원하기 페이지에서 지원자의 정보를 DB에 저장하고, 관리자 페이지에서 지원자의 정보를 확인할 수 있도록 하였습니다.",
    "text02_3" : "파일 업로드 구조는 Form에서 POST로 데이터를 전송하고, PHP에서 $_FILES를 통해 파일을 받아서 저장하는 방식으로 구현하였습니다. 이렇게 임시로 저장된 파일을 원하는 경로로 이동시키는 방식으로 파일 업로드를 구현하였습니다. 이 방식을 통해 지원을 하였을 시 이력서 사진을 업로드할 수 있도록 하였고 관리자 페이지에서는 지원자의 이력서 사진을 확인할 수 있도록 하였습니다. 또한 유저도 이력서 사진을 볼 수 있도록 지원확인 페이지를 만들었습니다.",
    "text02_4" : "풀 PHP 사이트였다면 세션만 포함하면 되지만 이번 프로젝트에서는 인재채용 depth만이 PHP였기 때문에 세션을 항상 받고있는지 확인이 필요했습니다. 그렇기 때문에 ajax를 이용하여 세션을 받아오는 PHP파일을 호출하여 세션을 받아오는 방식으로 구현하였습니다.",
    "text04" : "해당 프로젝트는 제가 담당한 구역한 DB로 다뤄야 했기 때문에 저 혼자의 힘으로 진행했습니다. 다만 DB연동 작업이 상당부분 진척되어 제 시간 안으로 개발이 끝나 다른 조원들의 어려운 부분을 같이 협업하는 시간을 만들어내어 만족스러웠습니다. 향후 이러한 PHP의 경험을 쌓아 다음의 3, 4차 프로젝트때에 큰 성과로 이어졌습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/netmarble/index.html"
  },
  {
    "id": 7,
    "name": "LMS프로젝트 - 관리자",
    "project_date" : "23.3.2 - 4.14",
    "project_program" : "HTML, CSS, PHP, JQuery, figma",
    "family": "REACT",
    "thumb": "id007_000.webp",
    "main_img": "id007_000.webp",
    "textimg01" : "id007_001.webp",
    "textimg02" : "id007_002.webp",
    "textimg03" : "id007_003.webp",
    "textimg04" : "id007_004.webp",
    "design" : "모듈식 디자인이기 때문에 각각 파트별로 나누어서 디자인을 해야 했습니다. 우선적으로 헤더, 푸터, 모듈, 모듈2로 나누어 세부적인 디자인을 작업해야 했고 총 담당으로서 디자인을 완성해야 했습니다. 모듈식으로 나누어 디자인하다보니 구현해야 할 페이지 대비 디자인시간이 대폭 줄었습니다. 또한 디자인을 하면서 모듈식으로 나누어 디자인을 하다보니 디자인을 수정할 때도 편리했습니다.",
    "text03" : "관리자 화면은 DB를 중점적으로 관리해야 하기 때문에 PHP를 이용하였습니다. 리액트로도 가능하지만, 팀 프로젝트이기 때문에 개발난이도가 높아 부득이하게 PHP를 사용할 수 밖에 없었습니다. PHP를 사용하면서 DB를 연동하여 관리자 페이지에서 DB를 관리할 수 있도록 하였습니다. 또한 관리자 페이지에서는 유저의 정보를 확인할 수 있도록 하였고, 유저의 전공과 수강신청을 확인할 수 있으며 허가 및 삭제할 수 있도록 하였습니다.",
    "Headtitle" : "기존의 복/붙 스타일에서 전용 LMS로",
    "title01" : "모듈로 제작 가능한 PHP",
    "title02" : "수강신청페이지 제작",
    "title03" : "공지사항 페이지네이션",
    "title04" : "CURD가 가능한 공지사항 게시판",
    "code1": "include_once '../db/db_conn.php'; //DB연결\ninclude_once '../db/config.php'; //DB세션\ninclude_once '../header.php'; //메뉴\ninclude_once './right/master_btn-user.php'; //우측메뉴\n\n\n",
    "code2" : "//유저관리용 php\n\n<?php\n    while($rows = mysqli_fetch_array($result)){\n      echo '<tr>';\n      echo '<td>'.$rows['apply_ID'].'</td>';\n      echo '<td>'.$rows['learn_title'].'</td>';\n      echo '<td>'.$rows['user_name'].'</td>';\n      echo '<td>'.$rows['apply_date'].'</td>';\n      if($rows['apply'] == 0){ ?>\n        <td>\n          <form action='./master_apply_confirm.php' method='post'>\n          <input type='hidden' name='apply_ID' value='<?=$rows['apply_ID']?>'>\n          <input type='hidden' name='verify' value='ok'>\n          <button type='submit' name='approve' class='btn btn-confirm1'>승인</button>\n          </form>\n        </td>\n      <?php }\n      else{\n      echo '<td> <span  class='btn btn-apply'>승인됨</span></td>';\n      }\n      echo '</tr>';\n    }\n    }\n    ?>\n\n//관리용 php\n\n// 승인\n    if(!$id == '' && !$verify == ''){\n      $sql = 'UPDATE learn_apply SET apply = 1 WHERE apply_id = '$id'';\n      $result = mysqli_query($conn, $sql);\n      \n      // 다시 불러와서 아래 작업을 위해 변수에 저장\n      $sql = 'SELECT * FROM learn_apply WHERE apply_id = '$id'';\n      $result = mysqli_query($conn, $sql);\n      $row = mysqli_fetch_array($result);\n\n    \n      // 학생 테이블의 learn_list에 해당 과목 추가\n      $user_insert = 'UPDATE user_table\n      SET learn_list = (\n        SELECT GROUP_CONCAT(learn_title)\n        FROM learn_apply\n        WHERE user_table.user_id = learn_apply.user_id\n      )';\n      $result = mysqli_query($conn, $user_insert);\n      $learn_title = $row['learn_title'];\n\n      // 정원 한명 추가\n      $sql = 'UPDATE learn_table\n      SET student_person = student_person + 1\n      WHERE learn_title = '$learn_title'';\n      $result = mysqli_query($conn, $sql);",
    "code3" : "<?php\n    $sql = 'SELECT * FROM notice_list';\n    $result = mysqli_query($conn, $sql);\n    $total_record = mysqli_num_rows($result); // 전체 글 수\n    $total_page = ceil($total_record / $scale); // 전체 페이지 수\n    $current_page = $_GET['page'] ?? 1; // 현재 페이지\n    if(!$current_page) $current_page = 1; // 페이지 번호가 지정이 안되었을 경우\n    $block_pages = 5; // 한 화면에 표시할 페이지 수\n    $block_total = ceil($total_page / $block_pages); // 전체 블록 수\n    $current_block = ceil($current_page / $block_pages); // 현재 블록\n\n    $prev_page = $current_page - 5; // <i class='fa-solid fa-chevron-left'></i> 페이지\n    $next_page = $current_page + 5; // <i class='fa-solid fa-chevron-right'></i> 페이지\n    if ($prev_page < 0){ // 페이지 번호가 지정이 안되었을 경우\n      $prev_page = 1;\n    } \n    else if ($next_page > $total_page) {// 마지막 페이지를 넘어갔을 경우\n      $next_page = $total_page;\n    } \n    if($current_page < 6){\n      echo '<span class='prev disable'><i class='fa-solid fa-chevron-left'></i></span>';\n    } else {\n    echo '\n    <a href='notice_list.php?page=' . $prev_page . '' class='prev'>\n    <i class='fa-solid fa-chevron-left'></i>\n    </a>\n    ';\n    };\n    for ($i = $current_block * $block_pages - $block_pages + 1; $i <= $current_block * $block_pages; $i++) {\n      if ($i > $total_page) break;\n      if ($i == $current_page) {\n        echo '<a href='notice_list.php?page=' . $i . '' class='active'>' . $i . '</a>';\n      } else {\n        echo '<a href='notice_list.php?page=' . $i . ''>' . $i . '</a>';\n      }\n    }\n    if($total_page < 6){\n      echo '<span class='next disable'><i class='fa-solid fa-chevron-right'></i></span>';\n    } else if ($current_page > $total_page - 3) {\n      echo '<span class='next disable'><i class='fa-solid fa-chevron-right'></i></span>';\n    } else {\n    echo '\n    <a href='notice_list.php?page=' . $next_page . '' class='next'><i class='fa-solid fa-chevron-right'></i></a>\n    ';\n    };\n  ?>      "
    ,
    "code4" : "if($mod == 'mod'){\n      if($files == null){\n        $files = $prev_file;\n      }\n      $update_sql = 'update notice_list set \n      notice_title='$notice_title', \n      notice_text='$notice_text', \n      notice_file='$files', \n      notice_date='$notice_date', \n      learn_num='$learn_num', \n      notice_detail='$notice_cate' \n      where num=$num';\n      $result = mysqli_query($conn, $update_sql); // sql에 저장된 명령 실행\n    } else {\n      $sql = 'insert into notice_list set \n      notice_title='$notice_title', \n      notice_text='$notice_text', \n      notice_file='$files', \n      notice_date='$notice_date', \n      learn_num='$learn_num', \n      notice_detail='$notice_cate'';\n      $result = mysqli_query($conn, $sql); // sql에 저장된 명령 실행  \n    }",
    "text01" : "기존의 명지대학교의 LMS는 헬로 LMS로서 외부 프로그램을 받아 사용했습니다. 그렇기 때문에 학교의 특징이 없는 탬플릿 사이트다 보니 이러한 점을 피드백 삼아 명지대학교의 특징을 담은 LMS를 만들어보자는 아이디어가 나왔습니다. 그래서 저희는 명지대학교의 특징을 담은 LMS를 만들기로 하였습니다.\n\n해당프로젝트는 기존의 프로젝트와 다르게 모듈식으로 구성하였기 때문에 새로운 방식으로 접근했어야 했습니다. 그렇기 때문에 조별로 모듈을 만들고 합치는 과정으로 PHP 사이트를 만들었습니다. \n\n개인의 개발범위 : 관리자페이지, 인덱스페이지, DB테이블 설계, 공지사항모듈, 수강신청모듈",
    "text02_1" : "PHP의 장점은 모듈화가 가능하다는 점입니다. 리액트 컴포넌트보다는 뒤떨어지지만 include_once()로 각 모듈을 불러와 하나의 페이지를 만들 수 있다는 것은 상당히 인상적이었고 제작시간을 상당히 줄일 수 있었습니다. \n\n 하지만 PHP는 서버에서 돌아가는 언어이기 때문에 서버를 구축해야만 테스트가 가능하다는 점이 단점이었습니다. 그래서 저희는 XAMPP를 이용하여 로컬서버를 구축하였고 이를 통해 테스트를 진행하였습니다.",
    "text02_2" : "유저 테이블과 수강신청 테이블 코드입니다. 유저가 신청을 하면 관리자는 올바른 수강인지 확인하고 처리하는 식으로 하였습니다. 이전의 LMS에는 자동처리를 해주지만, DB의 이해도를 위해서 더 복잡한 절차와 확실한 확인 방법을 채택하였습니다.",
    "text02_3" : "가장 많은 애를 먹었던 부분이었습니다. 해당 부분을 맡았던 조원과 협업해서 게시물의 페이지네이션을 구현하였습니다. 또한 게시물의 제목을 클릭하면 해당 게시물의 내용을 볼 수 있도록 하였습니다. 구현 원리는 게시물의 총량을 나누어 최대표시수만큼 게시물을 출력하고 페이지네이션을 구현하였습니다. 또한 5개씩 블록으로나누어 다음 이전 버튼을 누를 시 +5 -5를 해주어 페이지네이션을 구현하였습니다. 또한 1일경우나 끝일 경우에는 비활성화 되도록 처리하였습니다.",
    "text02_4" : "공지사항 모듈은 관리자가 입력, 수정, 읽기, 삭제가 가능하도록 만들었습니다. 또한 게시물의 제목을 클릭하면 해당 게시물의 내용을 볼 수 있도록 하였습니다. 그렇기 때문에 더욱 더 충분한 공지사항 게시판을 구현할 수 있었고 외부엔진을 사용하는 것이 아니라 순수한 PHP로 구현하는 것에 성공했습니다.",
    "text04" : "종합적인 PHP를 이용한 사이트 제작 프로젝트이었습니다. 특히 수강신청과 유저페이지, 강의 과목간의 관계형 데이터베이스에 대한 이해도를 높혔으며 PHP의 모듈화를 통해 사이트를 구축하는 방법을 배울 수 있었습니다. 또한 PHP의 장점과 단점을 알 수 있었고, PHP를 이용한 사이트 제작의 기본적인 틀을 익힐 수 있었습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/lms/index.php"
  },
  {
    "id": 8,
    "name": "LMS프로젝트 - 유저",
    "project_date" : "23.4.14 - 5.19",
    "project_program" : "HTML, CSS, PHP, JQuery, figma",
    "family": "REACT",
    "thumb": "id008_000.webp",
    "main_img": "id008_000.webp",
    "textimg01" : "id008_001.webp",
    "textimg02" : "id008_002.webp",
    "textimg03" : "id008_003.webp",
    "textimg04" : "id008_004.webp",
    "design" : "디자인은 반응형을 기반으로 하단에 바로가기 퀵메뉴 4개를 추가했습니다. 마찬가지로 대학교의 CI에 맞춰서 색상을 배정하였으며, 심플하고 깔끔한 스타일로 디자인을 진행하였습니다.",
    "text03" : "개발 라이브러리는 우선적으로 HTML과 CSS로 퍼블리싱을 진행한 후에 DB가 필요한 부분은 PHP모듈을 부착하는 식으로 개발하였습니다.",
    "Headtitle" : "PC와 동일한 사용자경험을 이끌어내기 위해서",
    "title01" : "강의 테이블의 데이터 가져오기",
    "title02" : "강의자료실 구현",
    "title03" : "강의별 공지사항 구현",
    "title04" : "과제제출 구현",
    "code1": "    <?php\n      $id = $_GET['id'];\n      $sql = 'SELECT * FROM learn_table WHERE learn_num = $id';\n      $result = mysqli_query($conn, $sql);\n      $row = mysqli_fetch_array($result);\n      $learn_about = $row['learn_about'];\n      $learn_about = explode(',', $learn_about);\n\nforeach($learn_about as $key => $value){\n        if($key == 0){\n          echo '<li class='learn_class-menubar-toggle'>';\n          echo '<p class='learn-class-title list01 act'>';\n          echo '<span>' . ($key + 1) . '주차</span>';\n          echo '<span class='learn-btn'><img src='../img/icon5.svg' alt='toggle'></span>';\n          echo '</p>';\n          echo '<div class='learn-class-info list01 act'> ';\n          echo '<video src='./img/sample.mp4' class='learn-class-videos'></video>';\n          echo '<p class='video-progress'><span class='video-progressbar'></span></p>';\n          echo '<ul class='learn-class-video_ctrl-wrap'>';\n          echo '<li class='btn01'><i class='fa-solid fa-play'></i></li>';\n          echo '<li class='btn02'><i class='fa-solid fa-pause'></i></li>';\n          echo '<li class='btn03'><i class='fa-solid fa-stop'></i></li>';\n          echo '<li class='btn04'>1X</li>';\n          echo '<li class='btn05'>2X</li>';\n          echo '</ul>';\n          echo $learn_about[$key] . '</div>';\n          echo '</li>';\n          } else {\n          echo '<li class='learn_class-menubar-toggle'>';\n          echo '<p class='learn-class-title list01'>';\n          echo '<span>' . ($key + 1) . '주차</span>';\n          echo '<span class='learn-btn'><img src='../img/icon5.svg' alt='toggle'></span>';\n          echo '</p>';\n          echo '<div class='learn-class-info list01'> ';\n          echo '<video src='./img/sample.mp4' class='learn-class-videos'></video>';\n          echo '<p class='video-progress'><span class='video-progressbar'></span></p>';\n          echo '<ul class='learn-class-video_ctrl-wrap'>';\n          echo '<li class='btn01'><i class='fa-solid fa-play'></i></li>';\n          echo '<li class='btn02'><i class='fa-solid fa-pause'></i></li>';\n          echo '<li class='btn03'><i class='fa-solid fa-stop'></i></li>';\n          echo '<li class='btn04'>1X</li>';\n          echo '<li class='btn05'>2X</li>';\n          echo '</ul>';\n          echo $learn_about[$key] . '</div>';\n          echo '</li>';\n        }\n      }\n    ?>",
    "code2" : "    <?php\n    $id = $_GET['id'];\n    $sql = 'SELECT * FROM learn_table WHERE learn_num = $id';\n    $result = mysqli_query($conn, $sql);\n    $row = mysqli_fetch_array($result);\n    $learn_about = $row['learn_file'];\n    $learn_about = explode(',', $learn_about);\n\n        foreach($learn_about as $key => $value){\n      if($key == 0){\n        echo '<li class='learn_class-menubar-toggle'>';\n        echo '<p class='learn-class-title list02 act'>';\n        echo '<span>' . ($key + 1) . '주차</span>';\n        echo '<span class='learn-btn'>';\n        echo '<img src='../img/icon5.svg' alt='toggle'>';\n        echo '</span>';\n        echo '</p>';\n        echo '<p class='learn-class-info list02 act'>';\n        echo '<a href='./files/learn/' . $value . ''>$value</a>';\n        echo '</p></li>';  \n      } else {\n        echo '<li class='learn_class-menubar-toggle'>';\n        echo '<p class='learn-class-title list02'>';\n        echo '<span>' . ($key + 1) . '주차</span>';\n        echo '<span class='learn-btn'><img src='../img/icon5.svg' alt='toggle'></span>';\n        echo '</p>';\n        echo '<p class='learn-class-info list02'>';\n        echo '<a href='./files/learn/' . $value . ''>$value</a>';\n        echo '</p></li>';\n      }\n    }\n  ?>",
    "code3" : "<?php\n    $learnID = $_GET['id'];\n    $start = $_GET['page'] ?? 1; // 현재 페이지\n    if(!$start) $start = 1; // 페이지 번호가 지정이 안되었을 경우\n    $start = ($start - 1) * 5; // 한 페이지에 표시할 글 수\n    $scale = 5; // 한 페이지에 표시할 글 수\n    $sql = 'SELECT * FROM notice_list where learn_num = $learnID  ORDER BY num DESC LIMIT $start, $scale'; // DESC 내림차순, ASC 오름차순\n    $result = mysqli_query($conn, $sql); // 쿼리문 실행\n\n    while($row = mysqli_fetch_array($result)){\n      $nl_num = $row['num'];\n      $nl_title = $row['notice_title'];\n      $nl_file = $row['notice_file'];\n      $nl_date = explode('-', $row['notice_date']);\n      $nl_date = $nl_date[0].'.'.$nl_date[1].'.'.$nl_date[2];\n      $nl_view = $row['notice_views'];\n      echo '<ul class='notice-item-wrap'>';\n      echo '<li class='notice-num'>'.$nl_num.'</li>';\n      echo '<li class='notice-title'><a href='notice.php?id='.$nl_num.''>'.$nl_title.'</a></li>';\n      if($nl_file == NULL){\n        echo '<li class='notice-file'>없음</li>';\n      }else{\n        echo '<li class='notice-file'><i class='fa-solid fa-paperclip'></i></li>';\n      }\n      echo '<li class='notice-date'>'.$nl_date.'</li>';\n      echo '<li class='notice-view'>'.$nl_view.'</li>';\n      echo '</ul>';\n    }\n  ?>"
    ,
    "code4" : "    <?php\n    $id = $_GET['id'];\n    $sql = 'SELECT * FROM learn_table WHERE learn_num = $id';\n    $result = mysqli_query($conn, $sql);\n    $row = mysqli_fetch_array($result);\n    $learn_assignment = $row['learn_assignment'];\n    $learn_assignment = explode(',', $learn_assignment);\n    $learn_about = $row['learn_file'];\n    $learn_about = explode(',', $learn_about);\n\n    foreach($learn_about as $key => $value){\n      if($key == 0){\n        echo '<form name='learn_upload' . $key . '' action='./module/learn_module_upload.php' method='post' enctype='multipart/form-data'>';\n        echo '<input type='hidden' name='learn_upload_id' value='$id'>';\n        echo '<input type='hidden' name='learn_upload_week' value='$key'>';\n        echo '<div class='learn_class-menubar-toggle act'><p class='learn-class-title list03 act'><span>' . ($key + 1) . '주차</span><span class='learn-btn'><img src='../img/icon5.svg' alt='toggle'></span></p>';\n        echo '<p class='learn-class-info list03 act'> <span class='learn-upload-info'>' . $learn_assignment[$key] . '</span>';\n        echo '<span class='learn_upload-input-wrap'>';\n        echo '<label for='learn_upload_file' class='learn_upload-upload_btn'>파일 업로드</label>';        echo '<span class='upload_info'></span>';\n        echo '<input type='file' name='learn_upload_file' id='learn_upload_file'><input type='submit' value='제출하기'></span></p></div>';\n        echo '</form>';\n      } else {\n        echo '<form name='learn_upload' . $key . '' action='./module/learn_module_upload.php' method='post' enctype='multipart/form-data'>';\n        echo '<input type='hidden' name='learn_upload_id' value='$id'>';\n        echo '<input type='hidden' name='learn_upload_week' value='$key'>';\n        echo '<div class='learn_class-menubar-toggle act'><p class='learn-class-title list03'><span>' . ($key + 1) . '주차</span><span class='learn-btn'><img src='../img/icon5.svg' alt='toggle'></span></p>';\n        echo '<p class='learn-class-info list03'> <span class='learn-upload-info'>' . $learn_assignment[$key] . '</span>';\n        echo '<span class='learn_upload-input-wrap'>';\n        echo '<label for='learn_upload_file' class='learn_upload-upload_btn'>파일 업로드</label>';        echo '<span class='upload_info'></span>';\n        echo '<input type='file' name='learn_upload_file' id='learn_upload_file'><input type='submit' value='제출하기'></span></p></div>';\n        echo '</form>';\n      }\n    }\n  ?>",
    "text01" : "프론트엔드 개발자과성의 마지막 팀 프로젝트였습니다. 해당 프로젝트는 이전의 LMS에서 관리를 다뤘다면 이 프로젝트는 사용자 관점으로 제작하는 것이기 때문에 더욱 신경을 써야 했습니다. \n \n디자인은 팀원들과 함께 진행하였고, 디자인을 기반으로 퍼블리싱 작업을 진행하였습니다. 제가 맡은 구역은 강의 상세페이지 부분입니다.",
    "text02_1" : "강의 자료를 받아오는 것부터 받아온 주차별로 표시되며, 가장 첫번째 강의는 펼친 상태로 보여지도록 했습니다. 또한 강의를 클릭하면 해당 강의의 자료가 펼쳐지도록 하였습니다. 이렇게 하면 사용자가 원하는 강의를 빠르게 찾을 수 있도록 하였고 영상 샘플을 추가로 넣었습니다. 다만 영상은 제작시간상 샘플 영상으로 대체하였습니다. 이 부분은 추후 수정할 예정입니다.",
    "text02_2" : "다음은 해당 주차별 강의자료실입니다. 주차별로 해당 자료의 이름 파일명을 표시하여 사용자가 원하는 자료를 빠르게 찾을 수 있도록 하였습니다. 또한 강의자료실에서는 강의자료를 다운로드 받을 수 있도록 하였습니다.",
    "text02_3" : "notice_table의 추가 컬럼을 만들어 강의ID와 공지카테고리를 넣어 해당 강의별로 휴강이나 다른 학습관련한 사항에 대한 공지사항을 볼 수 있도록 추가하였습니다. 또한 공지사항을 클릭하면 해당 공지사항의 내용을 볼 수 있도록 하였습니다.",
    "text02_4" : "주차별로 foreach문을 사용하여 해야할 과제의 내용과 파일첨부 기능을 만들었습니다. 비록 DB에 연동하지 못했지만 파일을 업로드하면 파일명까지 표시되도록 하였습니다. 또한 과제 재출을 하여 기존의 알림만 가능했던 LMS 시스템의 사용성을 높히는 것에 성공했습니다.",
    "text04" : "처음 조별 프로젝트에 형상관리를 안하다 보니 작업 중 충돌이 일어날 여지가 많았습니다. 다행히도 각 맡은 부분을 담당하기에 큰 충돌은 없었지만, 향후 git과 같은 형상관리 툴의 도입을 하는 것으로 프로젝트를 마쳤습니다.",
    "gitaddress" : "https://github.com/LDH9276/muji_sample",
    "homepage" : "http://leedh9276.dothome.co.kr/lms/index.php"
  }
  ]}